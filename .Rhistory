data <- read.csv("Cardiotocographic.csv")
head(data)
#mydata$NSP <- as.factor(data$NSP)
#mydata$NSP <- as.numeric(data$NSP)
data <- as.data.frame(data)
data <- na.omit(data)
sum(duplicated(data))
data <- unique(data)
# normalsie data
data <- scale(data)
install.packages("dplyr")
set.seed(123)
train_index <- sample(nrow(data), 0.7*nrow(data))
train <- data[train_index,]
test <- data[-train_index,]
head(train)
require(nnet)
# Fit a multinomial logistic regression model to the training set
model <- nnet::multinom(NSP ~ . , data=train)
summary(model)
#mydata$NSP <- as.factor(data$NSP)
#mydata$NSP <- as.numeric(data$NSP)
data <- as.data.frame(data)
require(nnet)
# Fit a multinomial logistic regression model to the training set
model <- nnet::multinom(NSP ~ . , data=train)
summary(model)
require(nnet)
# Fit a multinomial logistic regression model to the training set
model <- nnet::multinom(NSP ~ . , data=train)
train <- as.data.frame(train)
test <- as.data.frame(test)
require(nnet)
# Fit a multinomial logistic regression model to the training set
model <- nnet::multinom(NSP ~ . , data=train)
summary(model)
# Check the Z-score for the model (wald Z)
z <- summary(model)$coefficients/summary(model)$standard.errors
z
# 2-tailed z test
p <- (1 - pnorm(abs(z), 0, 1)) * 2
p
levels(data$nsp)
View(data)
View(data)
data <- read.csv("Cardiotocographic.csv")
head(data)
#mydata$NSP <- as.factor(data$NSP)
#mydata$NSP <- as.numeric(data$NSP)
data <- as.data.frame(data)
levels(data$nsp)
View(data)
data <- na.omit(data)
sum(duplicated(data))
data <- unique(data)
# normalsie data
data <- scale(data)
View(data)
View(data)
View(data)
View(data)
levels(data$NSP) <- c("1","2","3")
levels(data$NSP)
data <- read.csv("Cardiotocographic.csv")
head(data)
library(nnet)
# Since we are going to use Academic as the reference group, we need relevel the group.
data$NSP <- relevel(as.factor(data$NSP ))
data$NSP <- as.factor(data$NSP)
levels(data$NSP)
data <- as.data.frame(data)
data <- na.omit(data)
sum(duplicated(data))
data <- unique(data)
# normalsie data
data <- scale(data)
View(data)
data <- read.csv("Cardiotocographic.csv")
head(data)
#library(nnet)
# Since we are going to use Academic as the reference group, we need relevel the group.
#data$NSP <- relevel(as.factor(data$NSP ))
#data$NSP <- as.factor(data$NSP)
#levels(data$NSP)
data <- as.data.frame(data)
data <- na.omit(data)
sum(duplicated(data))
data <- unique(data)
# normalsie data
data[, 1:(ncol(data)-1)] <- scale(data[, 1:(ncol(data)-1)])
View(data)
View(data)
install.packages("dplyr")
set.seed(123)
# Split the data set into a training set (70%) and a testing set (30%)
train_index <- sample(nrow(data), 0.7*nrow(data))
# Split the data set into a training set (80%) and a testing set (20%)
train_index <- sample(nrow(data), 0.8*nrow(data))
train <- data[train_index,]
test <- data[-train_index,]
head(train)
train <- as.data.frame(train)
test <- as.data.frame(test)
View(p)
require(nnet)
# Fit a multinomial logistic regression model to the training set
model <- nnet::multinom(NSP ~ . , data=train)
summary(model)
# Check the Z-score for the model (wald Z)
z <- summary(model)$coefficients/summary(model)$standard.errors
z
# 2-tailed z test
p <- (1 - pnorm(abs(z), 0, 1)) * 2
p
p
p
# Check the Z-score for the model (wald Z)
z <- summary(model)$coefficients/summary(model)$standard.errors
z
z <- summary(model)$coefficients/summary(model)$standard.errors
z
source('C:/Users/Meriem/Desktop/Logistique_Regression/mini_projet.R')
# Check the Z-score for the model (wald Z)
z <- summary(model)$coefficients/summary(model)$standard.errors
z
model_backward1
data <- read.csv("Cardiotocographic.csv")
head(data)
#
library(nnet)
#
library(nnet)
# Since we are going to use Academic as the reference group, we need relevel the group.
#data$NSP <- relevel(as.factor(data$NSP ))
#data$NSP <- as.factor(data$NSP)
#levels(data$NSP)
data <- as.data.frame(data)
data <- na.omit(data)
sum(duplicated(data))
data <- unique(data)
# normalsie data
data[, 1:(ncol(data)-1)] <- scale(data[, 1:(ncol(data)-1)])
set.seed(123)
# Split the data set into a training set (80%) and a testing set (20%)
train_index <- sample(nrow(data), 0.8*nrow(data))
train <- data[train_index,]
test <- data[-train_index,]
head(train)
train <- as.data.frame(train)
test <- as.data.frame(test)
require(nnet)
# Fit a multinomial logistic regression model to the training set
model <- nnet::multinom(NSP ~ . , data=train)
summary(model)
# Check the Z-score for the model (wald Z)
z <- summary(model)$coefficients/summary(model)$standard.errors
z
# 2-tailed z test
p <- (1 - pnorm(abs(z), 0, 1)) * 2
p
exp(coef(model))
# Make predictions on the testing set
predicted_classes <- predict(model, newdata=test)
#Confusion Matrix & Misclassification Error - Training Data
p <- predict(model,test)
head(p)
head(test$NSP)
tab <- table(p,test$NSP)
tab
acc=sum(diag(tab))/sum(tab)
acc
1-acc
# Create a confusion matrix
confusion_matrix <- table(test$NSP, predicted_classes)
err_rate <-(confusion_matrix[2,1]+confusion_matrix[1,2])/sum(confusion_matrix)
print(confusion_matrix)
print(err_rate)
# Calculate precision, recall, and F1-score for each class
precision <- diag(confusion_matrix)/colSums(confusion_matrix)
recall <- diag(confusion_matrix)/rowSums(confusion_matrix)
f1_score <- 2*precision*recall/(precision + recall)
# Calculate overall accuracy
overall_accuracy <- sum(diag(confusion_matrix))/sum(confusion_matrix)
cat("\n")
cat(sprintf("Precision: %s\n", paste(round(precision, 3), collapse = ", ")))
cat(sprintf("Recall: %s\n", paste(round(recall, 3), collapse = ", ")))
cat(sprintf("F1-Score: %s\n", paste(round(f1_score, 3), collapse = ", ")))
cat(sprintf("Overall Accuracy: %s\n", round(overall_accuracy, 3)))
print(model)
# Use the backward elimination method to select the most relevant variables
model_backward <- step(model, direction = "backward")
model_backward
# Make predictions on the testing set
predicted_classes <- predict(model_backward, newdata=test)
#Confusion Matrix & Misclassification Error - Training Data
p <- predict(model_backward,test)
head(p)
head(test$NSP)
tab <- table(p,test$NSP)
tab
acc=sum(diag(tab))/sum(tab)
acc
1-acc
model_backward1 <- step(model_backward, direction = "backward")
model_backward1
summary(model_backward1)$coefficients[, "Pr(>|z|)"]
summary(model_backward1)
vif(model)
library(VIF)
install.packages("vif")
install.packages("car")
install.packages("car")
library(car)
install.packages("C:/Users/Meriem/Downloads/car_3.1-2.tar.gz", repos = NULL, type = "source")
model_backward
model_backward <- nnet::multinom(NSP ~ width+min+max. , data=train)
model_backward <- nnet::multinom(NSP ~ Width+Min+Max  , data=train)
summary(model_backward)
model_backward <- nnet::multinom(NSP ~ LB+AC+FM+UC+DP+ASTV+MSTV+ALTV+Nzeros  , data=train)
summary(model_backward)
library(lmtest)
install.packages("lmtest")
library(lmtest)
